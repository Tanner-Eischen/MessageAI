import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:messageai/data/drift/app_db.dart';
import 'package:messageai/services/ai_analysis_service.dart';

/// Provider for the AI Analysis Service singleton
final aiAnalysisServiceProvider = Provider<AIAnalysisService>((ref) {
  return AIAnalysisService();
});

/// Provider for getting analysis for a specific message
final messageAnalysisProvider = FutureProvider.family<AiAnalysi?, String>(
  (ref, messageId) async {
    final service = ref.watch(aiAnalysisServiceProvider);
    return await service.getAnalysis(messageId);
  },
);

/// Stream provider for watching analysis changes for a message
final messageAnalysisStreamProvider = StreamProvider.family<AiAnalysi?, String>(
  (ref, messageId) {
    final service = ref.watch(aiAnalysisServiceProvider);
    return service.watchAnalysis(messageId);
  },
);

/// Provider for getting analyses for a conversation
final conversationAnalysisProvider = FutureProvider.family<Map<String, AiAnalysi>, ConversationAnalysisParams>(
  (ref, params) async {
    final service = ref.watch(aiAnalysisServiceProvider);
    return await service.getConversationAnalysis(
      params.conversationId,
      params.messageIds,
    );
  },
);

/// Provider for analysis statistics
final analysisStatsProvider = FutureProvider<Map<String, dynamic>>(
  (ref) async {
    final service = ref.watch(aiAnalysisServiceProvider);
    return await service.getAnalysisStats();
  },
);

/// Provider for requesting analysis (returns the service method)
/// Use this to trigger analysis requests from UI
final requestAnalysisProvider = Provider<Future<AiAnalysi?> Function(String, String)>((ref) {
  final service = ref.watch(aiAnalysisServiceProvider);
  return (messageId, messageBody) => service.requestAnalysis(messageId, messageBody);
});

/// Parameters for conversation analysis provider
class ConversationAnalysisParams {
  final String conversationId;
  final List<String> messageIds;

  ConversationAnalysisParams({
    required this.conversationId,
    required this.messageIds,
  });

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ConversationAnalysisParams &&
          runtimeType == other.runtimeType &&
          conversationId == other.conversationId &&
          _listEquals(messageIds, other.messageIds);

  @override
  int get hashCode => conversationId.hashCode ^ messageIds.hashCode;

  bool _listEquals(List<String> a, List<String> b) {
    if (a.length != b.length) return false;
    for (int i = 0; i < a.length; i++) {
      if (a[i] != b[i]) return false;
    }
    return true;
  }
}

